#if defined(__hpux) && !defined(_HPUX_SOURCE) /*Barrand*/
#define _HPUX_SOURCE
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <signal.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <unistd.h>

/*Co*/
#include <CMemory.h>
#include <CList.h>
#include <CString.h>
#include <CPrinter.h>

#include <OBatchP.h>

#ifdef __cplusplus
extern "C"{
#endif
static void    InitializeClass      ();
static void    FreeRecord           (OBatch);
static int     CreateProcess        (char*,int*,int*,int*);
static int     IsPending            (int);
#ifdef __cplusplus
}
#endif

typedef unsigned long Ulong;
#define NotFound    (-1)
#define STDOUT         1
#define STDERR         2

static struct {
  OBatch*  extent;
  int      init;
  int      number;
} Class = {NULL,0,0};
/***************************************************************************/
static void InitializeClass (
)
/***************************************************************************/
/*
  ADD DEATH CHILD SIGNAL HANDLER TO AVOID ZOMBIES.
*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
  struct sigaction act;
  struct sigaction oact;
/*.........................................................................*/
  if (Class.init==1) return;

  act.sa_handler = SIG_IGN;
  act.sa_flags   = SA_NOCLDSTOP;
  sigaction      (SIGCHLD,&act,&oact);     

  Class.init = 1;
}
/***************************************************************************/
void OBatchClearClass (
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  CListDestroy         ((CList)Class.extent,(CListVisitEntryFunction)FreeRecord);
  Class.extent        = NULL;
}
/***************************************************************************/
int OBatchGetExtentSize (
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  return CListGetSize ((CList)Class.extent);
}
/***************************************************************************/
void OBatchDeclareExtentInFDSET (
 void* a_fdset
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
  OBatch* itema;
/*.........................................................................*/
  for(itema=Class.extent;(itema!=NULL) && (*itema!=NULL);itema++)
    {
      if((*itema)->pread>=0) FD_SET ((*itema)->pread,(fd_set*)a_fdset);
    }
}
/***************************************************************************/
void OBatchSurveyExtent (
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
  OBatch* itema;
/*.........................................................................*/
  for(itema=Class.extent;(itema!=NULL) && (*itema!=NULL);itema++)
    {
      if(OBatchSurvey(*itema)==0)
	{
	  OBatchDelete (*itema);
	  itema--;
	}
    }
}
/***************************************************************************/
OBatch* OBatchGetIdentifiers (
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  return Class.extent;
}
/***************************************************************************/
int OBatchIsValid (
 OBatch This 
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  return (CListGetEntryIndex((CList)Class.extent,This,NULL) == NotFound ? 0 : 1);
}
/***************************************************************************/
OBatch OBatchCreate (
 char* a_command
,OBatchTreatmentFunction a_treatment
,OBatchTreatmentFunction a_posttreatment
)
/***************************************************************************/
/*
 * execute a command in background,
 * and retrieve process infos to be stored
 * in a OBatch object.
 */
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
  OBatch    This = NULL;
  int       pread,pwrite;
  int       pid;
/*.........................................................................*/
  InitializeClass();

  This = (OBatch) CMemoryAllocateBlock(sizeof(OBatchRecord));
  if(This==NULL) return NULL;
  
  if(CreateProcess(a_command,&pid,&pread,&pwrite)==0) {CMemoryFreeBlock(This);return NULL;}

  CListAddEntry  ((CList*)&(Class.extent),This);

  This->command         = CStringDuplicate (a_command);
  This->pread           = pread;           /* process pipe output*/
  This->pwrite          = pwrite;          /* process pipe input */
  This->end             = 1;               /* end process flag */
  This->pid             = pid;             /* pid process */ 
  This->treatment       = a_treatment;     /* graphic entry treatment */
  This->posttreatment   = a_posttreatment; /* graphic entry post treatment*/
  This->userData        = NULL;
  This->userFunction    = NULL;
      
  return This;
}
/***************************************************************************/
void OBatchDelete (
 OBatch This
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if (This==NULL) return;
  CListRemoveEntry ((CList)Class.extent,This);
  FreeRecord       (This);
}
/***************************************************************************/
static void FreeRecord (
 OBatch This 
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if(This->end==1) OBatchKillProcess (This);
  CStringDelete    (This->command);
  This->command    = NULL;
  CMemoryFreeBlock (This);
}
/***************************************************************************/
void OBatchKillProcess (
 OBatch This
)
/***************************************************************************/
/* Kill all process wich process group is equal to This->pid               */  
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if (This==NULL) return;
  if (This->pid>0) kill(-This->pid,9);
}
/***************************************************************************/
char* OBatchGetString (
 OBatch This
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if (This==NULL) return NULL;
  return This->line;
}
/***************************************************************************/
char* OBatchGetCommand (
 OBatch This
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if (This==NULL) return NULL;
  return This->command;
}
/***************************************************************************/
int OBatchGetChannel (
 OBatch This
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if (This==NULL) return 0;
  return This->pread;
}
/***************************************************************************/
int OBatchSurvey (
 OBatch This
)
/***************************************************************************/
/*
 * This function should be considered as a background task,typically
 * called in a workproc loop.
 * return boolean. A return Zero means end process
 */
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
  int nlu;    /* nbr characters read in pipe  */
  int status; /* pid sstatus */
/*.........................................................................*/
  if (This==NULL) return 0;
  switch(This->end) 
    {
      case 1 : 
	/****************************************************/
	/*               CONTINUE                           */
	/****************************************************/
	if(IsPending(This->pread)!=0) /*Is There new data pending.*/
	  {
	    nlu = read (This->pread,This->line,BUFFERSIZE);
	    if (nlu!=0)
	      {
		This->line[nlu] = '\0';
		/*ENTRY TREATMENT*/
		if (This->treatment!=NULL) This->treatment(This);
		return 1;
	      }
	  }
	else
	  {
	    if (waitpid(This->pid,&status,WNOHANG)==-1) /*CHECK END DATA*/
	      {
		if  (IsPending(This->pread)==0) This->end = 0;
	      }
	    return 1;
	  }
	break;
      case  0 :
	/****************************************************/
	/*               STOP                               */
	/****************************************************/
	close        (This->pread);
	close        (This->pwrite);
	This->pread  = -1;
	This->pwrite = -1;
	fflush       (stdout);
	fflush       (stderr);
	/*POST TREATMENT*/
	if (This->posttreatment != NULL) This->posttreatment(This);
	return 0;
      }
  return 0;
}
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
static int CreateProcess (
 char* a_command
,int*  a_pid
,int*  a_pread
,int*  a_pwrite
)
/***************************************************************************/
/*
 * COMMAND we use a fork&exec  to run a command in background 
 * and we redirect sterr,stdout  in a pipe 
 * NOTE : Create a new process group for convenient kill function;
 * As we create a process group, process AND subprocess
 * with same pgid will be killed together.
 */
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{  
  int    prev;
  int    preverror;
  int    pfd[2];
  int    localpid;
/*.........................................................................*/
  if(a_command==NULL) return 0;
  if(a_pid   !=NULL) *a_pid    = 0;
  if(a_pread !=NULL) *a_pread  = -1;
  if(a_pwrite!=NULL) *a_pwrite = 0;

  if (pipe (pfd) == -1) return 0;

/*CREATING POPEN FOR Process parent and child*/
  prev      = dup (STDOUT);
  preverror = dup (STDERR);
  dup2      (pfd[1], STDOUT);
  dup2      (pfd[1], STDERR);

  if(a_pread !=NULL) *a_pread  = pfd[0];
  if(a_pwrite!=NULL) *a_pwrite = pfd[1];
  
  localpid = (int) fork();

  switch (localpid)
    {
      case 0 : 
	setpgid(0,0);    /*Create new process group.*/
#ifdef ultrix
	execl("/bin/sh5","sh","-c",a_command,NULL);
#else
	execl("/bin/sh","sh","-c",a_command,NULL);
#endif
	exit (EXIT_SUCCESS);  /*Exit from fork.*/
	break;
      case -1 :
	if(a_pread !=NULL) *a_pread  = -1;
	if(a_pwrite!=NULL) *a_pwrite = -1;
	break;
      default : /*Parent process receive child pid*/
	if(a_pid!=NULL) *a_pid = localpid;
	break;
      } 

/*Retrieve Old Stderr,stdout for process parent.*/
  dup2   (prev         , STDOUT);
  dup2   (preverror    , STDERR);
  close  (prev);
  close  (preverror);
  return (localpid==-1) ? 0 : 1;
}  
/***************************************************************************/
static int IsPending (
 int a_canal
)
/***************************************************************************/
/* return a boolean.
 * Look in canal if there is data to read */
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
  static  fd_set  fdset;
  struct  timeval timeout;
/*.........................................................................*/
  if(a_canal<0) return 0;
  FD_ZERO (&fdset);
  FD_SET  (a_canal, &fdset);
/* NO TIME OUT for SELECT() */
  timeout.tv_sec  = 0;
  timeout.tv_usec = 0;
  select  (FD_SETSIZE,(fd_set*) &fdset, NULL, NULL, &timeout);
  return  FD_ISSET (a_canal, &fdset);
}
/***************************************************************************/
/***************************************************************************/
/***************************************************************************/
int OBatchGetAttribute (
 OBatch  This
,char*  a_name
,void*  a_user
,void*  a_addr 
,int*   a_number
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if(a_number!=NULL) *a_number = 0;
  if(This==NULL)    return 0;
  if(a_name==NULL)  return 0;
  if(a_addr==NULL)  return 0; 

       if(strcmp(a_name,"identifier")==0) *((Ulong*)a_addr)  = (Ulong)This;
  else if(strcmp(a_name,"command")==0)    *((char**)a_addr)  = This->command;
  else if(strcmp(a_name,"pid")==0)        *((int*)a_addr)    = This->pid;
  else 
    {
      CInfoF ("OBatchGetAttribute: unknown property %s.\n",a_name);
      return 0;
    }

  a_user = NULL;
  return 1;
}
/***************************************************************************/
void OBatchSetUserData (
 OBatch This
,void*  a_value
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if(This==NULL) return;
  This->userData = a_value;
}
/***************************************************************************/
void* OBatchGetUserData (
 OBatch This
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if(This==NULL) return NULL;
  return This->userData;
}
/***************************************************************************/
void OBatchSetUserFunction (
 OBatch             This
,OBatchUserFunction a_value
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if(This==NULL) return;
  This->userFunction = a_value;
}
/***************************************************************************/
OBatchUserFunction OBatchGetUserFunction (
 OBatch This
)
/***************************************************************************/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
{
/*.........................................................................*/
  if(This==NULL) return NULL;
  return This->userFunction;
}
